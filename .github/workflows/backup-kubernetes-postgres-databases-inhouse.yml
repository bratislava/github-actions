name: Backup kubernetes databases.
on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Define the type of machine to run the job on'
        type: string
        required: false
        default: '["self-hosted", "Linux", "X64", "bratislava"]'
      cluster:
        description: 'Kubernetes cluster name'
        default: 'tkg-innov-dev'
        required: true
        type: string
      namespace:
        description: 'Namespace where should be build app deployed'
        default: 'standalone'
        required: true
        type: string
      url:
        description: 'Kubernetes cluster url'
        default: 'https://tkg.dev.bratislava.sk'
        required: true
        type: string
    secrets:
      service-account:
        # kubectl get secret default-token-7kvjs -n=standalone -o jsonpath='{.data.token}' | base64 --decode  > token.tmp
        description: 'Kubernetes service account'
        required: true

jobs:
  backup:
    name: Backup databases
    runs-on: ${{fromJSON(inputs.runs-on)}}
    steps:
      - name: Checking out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pipelines Version
        run: |
          echo "Pipelines version: 2.1.0"

      - name: Directory check
        run: pwd

      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0

      - name: Kubernetes set service account token
        run: kubectl config set-credentials default --token=${{ secrets.service-account }}

      - name: Kubernetes set server with certificate account token
        run: kubectl config set-cluster ${{ inputs.cluster }}  --insecure-skip-tls-verify --server=${{ inputs.url }}

      - name: Kubernetes set context cluster
        run: kubectl config set-context ${{ inputs.cluster }} --cluster=${{ inputs.cluster }} --user=default

      - name: Kubernetes use context
        run: kubectl config use-context ${{ inputs.cluster }}
      - name: Run backup
        run: |          
          for pod in $(kubectl get pod -n ${{ inputs.namespace }} --insecure-skip-tls-verify -l service=database -o name);
          do
            tmp=${pod##*/}
            service=${tmp//-database-0}
            echo "Service: ${service}"

            # no postgres db in clamav-cvdmirror
            if [[ "$service" == "clamav-cvdmirror" ]]; then
              echo "  skipping by default..."
              continue
            fi
          
            echo -n "  checking if is running..."
            date=$(kubectl exec -n ${{ inputs.namespace }} --insecure-skip-tls-verify ${pod} --request-timeout=5s -- date)
            if [[ $date == "" ]]; then
              echo "  NOK - skipping...";
              continue
            fi
            echo " OK";
            
            echo -n "  getting database name:";            
            database=$(kubectl exec -n ${{ inputs.namespace }} --insecure-skip-tls-verify ${pod} --request-timeout=5s -- sh -c 'echo $POSTGRES_DB')
            echo " ${database}"
          
            folder="${{ inputs.cluster }}/${{ inputs.namespace }}/${service}"
            echo -n "  creating folder ${folder}...";
            mkdir -p $folder
            echo " OK"

            echo -n "  creating dump of ${database} database...";
            kubectl exec -n ${{ inputs.namespace }} --insecure-skip-tls-verify ${pod} -- sh -c 'pg_dump -c -C -U $POSTGRES_USER -d $POSTGRES_DB' > "${folder}/${database}-${date}.sql"
            echo " OK"

          done

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.cluster }}.${{ inputs.namespace }}
          path: ${{ inputs.cluster }}