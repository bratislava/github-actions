name: Backup kubernetes postgres databases.
on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Define the type of machine to run the job on'
        type: string
        required: false
        default: '["self-hosted", "Linux", "X64", "bratislava"]'
      backup:
        description: 'Two types of backups postgress or shared-wordpress'
        type: string
        required: false
        default: 'postgres'
      cluster:
        description: 'Kubernetes cluster name'
        required: true
        type: string
      namespace:
        description: 'Namespace where should be build app deployed'
        required: true
        type: string
      url:
        description: 'Kubernetes cluster url'
        default: 'https://tkg.dev.bratislava.sk'
        required: true
        type: string
    secrets:
      service-account:
        description: 'Kubernetes service account'
        required: true
      minio-endpoint:
        description: 'Minio endpoint url'
        required: true
      minio-access:
        description: 'Minio access key'
        required: true
      minio-secret:
        description: 'Minio secret key'
        required: true
      minio-bucket:
        description: 'Minio bucket name'
        required: true
      aws-key:
        description: 'AWS key id'
        required: true
      aws-secret:
        description: 'AWS secret access key'
        required: true
      aws-bucket:
        description: 'AWS bucket name'
        required: true

jobs:
  backup:
    name: Backup databases
    runs-on: ${{fromJSON(inputs.runs-on)}}
    steps:
      - name: Checking out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pipelines Version
        run: |
          echo "Pipelines version: 2.1.0"

      - name: Directory check
        run: pwd

      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0

      - name: Kubernetes set service account token
        run: kubectl config set-credentials default --token=${{ secrets.service-account }}

      - name: Kubernetes set server with certificate account token
        run: kubectl config set-cluster ${{ inputs.cluster }}  --insecure-skip-tls-verify --server=${{ inputs.url }}

      - name: Kubernetes set context cluster
        run: kubectl config set-context ${{ inputs.cluster }} --cluster=${{ inputs.cluster }} --user=default

      - name: Kubernetes use context
        run: kubectl config use-context ${{ inputs.cluster }}
      - name: Run database backup
        run: |    
          
          backup="${{ inputs.backup }}"
          if [[ $backup == "shared-wordpress" ]]; then
            echo "We are going to backup shared wordpress databases."
            select=$(kubectl get pod -n ${{ inputs.namespace }} --insecure-skip-tls-verify -l app.kubernetes.io/name=wordpress -o name)
          else 
            echo "We are going to backup postgres databases."
            select=$(kubectl get pod -n ${{ inputs.namespace }} --insecure-skip-tls-verify -l service=database -o name)
          fi
          
          for pod in ${select};
          do
            tmp=${pod##*/}
            service=${tmp//-database-0}
            echo "Service: ${service}"

            # no postgres db in clamav-cvdmirror
            if [ "$service" = "clamav-cvdmirror" ]; then
              echo "  skipping - no postgress db..."
              continue
            fi
          
            echo -n "  checking if pod is running..."
            date=$(kubectl exec -n ${{ inputs.namespace }} --insecure-skip-tls-verify ${pod} --request-timeout=5s -- date)
            if [[ $date == "" ]]; then
              echo "  NOK - skipping...";
              continue
            fi
            echo " OK";
          
            folder="backup/${{ inputs.cluster }}/${{ inputs.namespace }}/${service}"
            echo -n "  creating export folder ${folder}...";
            mkdir -p $folder
            echo " OK"
            
            if [[ $backup == "shared-wordpress" ]]; then
              echo -n "  obtaining service database pass...";
              database_pass = $(kubectl exec -n ${{ inputs.namespace }} -c wordpress --insecure-skip-tls-verify ${pod} -- sh -c 'echo $WORDPRESS_DB_PASSWORD')
              echo " OK"
          
              echo -n "  exporting database from mariadb...";
              command="mysqldump --user=${service} --password=${pass} --all-databases"
              kubectl exec -c mariadb -n ${{ inputs.namespace }} --insecure-skip-tls-verify -- sh -c ${command} > "${folder}/${database}-${date}.sql" || true
              echo " OK"
            else
              echo -n "  getting database name:";            
              database=$(kubectl exec -n ${{ inputs.namespace }} --insecure-skip-tls-verify ${pod} --request-timeout=5s -- sh -c 'echo $POSTGRES_DB')
              echo " ${database}"
    
              echo -n "  creating dump of ${database} database...";
              date=$(date '+date-%Y-%m-%d-time-%H-%M-%S')
              kubectl exec -n ${{ inputs.namespace }} --insecure-skip-tls-verify ${pod} -- sh -c 'pg_dump -c -C -U $POSTGRES_USER -d $POSTGRES_DB' > "${folder}/${database}-${date}.sql" || true
              echo " OK"
            fi
          done

      - name: Upload backups to MinIO
        uses: ckylinmc/minio-upload-action@v1.2
        with:
          endpoint: ${{ secrets.minio-endpoint }}
          accesskey: ${{ secrets.minio-access }}
          secretkey: ${{ secrets.minio-secret }}
          bucketname: ${{ secrets.minio-bucket }}
          source: 'backup'
          dest: '/'

# docker solution
#      - name: Upload backups to MinIO
#        uses: hkdobrev/minio-deploy-action@v1
#        with:
#          endpoint: ${{ secrets.minio-endpoint }}
#          access_key: ${{ secrets.minio-access }}
#          secret_key: ${{ secrets.minio-secret }}
#          bucket: ${{ secrets.minio-bucket }}
#          source_dir: 'backup'
#          target_dir: '/'

# will be allowed later after ACL terraform fix
#      - name: Upload backups to AWS
#        uses: shallwefootball/s3-upload-action@master
#        with:
#          aws_key_id: ${{ secrets.aws-key }}
#          aws_secret_access_key: ${{ secrets.aws-secret}}
#          aws_bucket: ${{ secrets.aws-bucket }}
#          source_dir: 'backup'