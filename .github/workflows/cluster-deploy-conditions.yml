name: Workflow which determines, what should be deployed on strapi/next projects
on:
  workflow_call:
    outputs:
      dev-strapi:
        description: "Returns true if dev-strapi can be deployed"
        value: ${{ jobs.conditions.outputs.dev-strapi }}
      dev-next:
        description: "Returns true if dev-next can be deployed"
        value: ${{ jobs.conditions.outputs.dev-next }}
      staging-strapi:
        description: "Returns true if staging-strapi can be deployed"
        value: ${{ jobs.conditions.outputs.staging-strapi }}
      staging-next:
        description: "Returns true if staging-next can be deployed"
        value: ${{ jobs.conditions.outputs.staging-next }}
      prod-strapi:
        description: "Returns true if prod-strapi can be deployed"
        value: ${{ jobs.conditions.outputs.prod-strapi }}
      prod-next:
        description: "Returns true if prod-next can be deployed"
        value: ${{ jobs.conditions.outputs.prod-next }}
jobs:
  changes:
    name: Checking for directory changes
    runs-on: ubuntu-latest
    outputs:
      strapi: ${{ steps.filter.outputs.strapi }}
      next: ${{ steps.filter.outputs.next }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            strapi:
              - 'strapi/**'
            next:
              - 'next/**'
  conditions:
    name: Checking deployment conditions
    needs: changes
    runs-on: ubuntu-latest
    env:
      COUNT: 0
    outputs:
      dev-strapi: ${{ steps.dev-strapi.outputs.condition }}
      dev-next: ${{ steps.dev-next.outputs.condition }}
      staging-strapi: ${{ steps.staging-strapi.outputs.condition }}
      staging-next: ${{ steps.staging-next.outputs.condition }}
      prod-strapi: ${{ steps.prod-strapi.outputs.condition }}
      prod-next: ${{ steps.prod-next.outputs.condition }}
    steps:
      - name: Print changes
        run: |
          echo "### Changes in the code and tag info" >> $GITHUB_STEP_SUMMARY
          echo ":arrow_right: Changes in strapi: ${{ needs.changes.outputs.strapi }}" >> $GITHUB_STEP_SUMMARY
          echo ":arrow_right: Changes in next: ${{ needs.changes.outputs.next }}" >> $GITHUB_STEP_SUMMARY
          echo ":arrow_right: Tag value: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

      - id: dev-strapi
        name: Check for dev strapi
        if: needs.changes.outputs.strapi == 'true' && startsWith(github.ref, 'refs/tags/dev-strapi')
        run: |
          echo "COUNT=$(($COUNT+1))" >> $GITHUB_ENV
          echo "::set-output name=condition::true"

      - id: dev-next
        name: Check for dev next
        if: needs.changes.outputs.next == 'true' && startsWith(github.ref, 'refs/tags/dev-next')
        run: |
          echo "COUNT=$(($COUNT+1))" >> $GITHUB_ENV
          echo "::set-output name=condition::true"

      - id: staging-strapi
        name: Check for staging strapi
        if: needs.changes.outputs.strapi == 'true' && (startsWith(github.ref, 'refs/tags/staging-strapi') || github.event.pull_request.merged == true)
        run: |
          echo "COUNT=$(($COUNT+1))" >> $GITHUB_ENV
          echo "::set-output name=condition::true"

      - id: staging-next
        name: Check for staging next
        if: needs.changes.outputs.next == 'true' && (startsWith(github.ref, 'refs/tags/staging-next') || github.event.pull_request.merged == true)
        run: |
          echo "COUNT=$(($COUNT+1))" >> $GITHUB_ENV
          echo "::set-output name=condition::true"

      - id: prod-strapi
        name: Check for prod strapi
        if: startsWith(github.ref, 'refs/tags/prod-strapi')
        run: |
          echo "COUNT=$(($COUNT+1))" >> $GITHUB_ENV
          echo "::set-output name=condition::true"

      - id: prod-next
        name: Check for prod next
        if: startsWith(github.ref, 'refs/tags/prod-next')
        run: |
          echo "COUNT=$(($COUNT+1))" >> $GITHUB_ENV
          echo "::set-output name=condition::true"

      - id: conditions-count-two
        name: Checking if there is only one condition true
        if: env.COUNT > 1
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There can be only one deployment to cluster. Now we have more then one. You have probably different affected files and different tag.')

      - id: conditions-count-zero
        name: Checking if there is only zero condition true
        if: env.COUNT == 0
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('You have propably missmatch between tag and folder changes. Like you have changes in `/strapi` and tag was `dev-next`. See logs above for debugging.')


